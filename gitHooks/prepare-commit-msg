#!/bin/bash

# Add related work items to commit message
# Setup:
#   EITHER place this script in .git/hooks directory in your repisotry (local)
#       OR place inside your git template's hooks directory, then
#          run git init from inside the root of each repository (global)

# Usage:
#   Script runs automatically whenever you create a new commit.
#   To make use of it you will need to start your branch names with the work item ids
#   eg: feature/12345-make-miricles, bugfix/11111-22222-swat-flies
#   The work item number(s) will automically be included, prefixed with an apporiate verb

# Remarks
#   Only the first set of numbers, after the branch type, are used.
#   So bugfix/123-456-fix-789 only detects #123 and #456, not #789
#   No checks are done to insure the numbers relate to work items.
#   If the commit is a merge, squash, modification of an existing commit,
#   or if a simular work item line already exists in the message: Then the line
#   will be prefixed with a '#' commenting it out.


#Parse branch name into branchInfo
# branchInfo[0] will contain the branch type (everything upto first /)
# branchInfo[1] will contian work item ids split by spaces
IFS=$'\n' branchInfo=($(git symbolic-ref --short HEAD 2>/dev/null | awk '
    BEGIN {RS="[/\n-]";stage=0}
    stage==0 {print $0; stage=1; ORS=" "; next;}
    /^[0-9]+$/ {print "#"$0; next;}
    {exit}
'));

if [ "${#branchInfo[@]}" -lt 2 ]; then
    # TODO: we need a way to work out the branch if we are rebasing
    echo "No work items found for branch"
    exit
fi

#Choose which verb to use
case ${branchInfo[0]} in
    bugfix|hotfix) workVerb="Fixes";;
    feature) workVerb="Implements";;
    *) workVerb="Related";;
esac

workItems=${branchInfo[1]}

if [ -z "$workItems" ]; then
    echo "No work items found for branch"
    exit
fi

#Make sure the existing message is atleast 2 lines long
[[ "$(wc -l < $1)" == "1" ]] && echo "" >> $1

#Find the first line that starts with one of the possible work verbs
insertAfter=$(sed -n '/^\(Implements\|Fixes\|Related\)/ =' $1 | head -1)
useHash="# "

#If we can't find such a line use the last non comment line
if [ -z "$insertAfter" ]; then
    insertAfter=$(sed -n '/^[^#]\|^$/ =' $1 | tail -1)
    useHash="" #And don't comment out our line
fi

# Only add line if we are going to use it, or edit it
case $2 in
    "message"|"template"|"")
        if [ "${useHash}" != "#" ] || [ "${GIT_EDITOR}" != ":" ]; then
            sed -i "${insertAfter:-1}a ${useHash}$workVerb: $workItems" $1
        fi
        ;;
    "merge"|"squash"|"commit")
        if [ "${GIT_EDITOR}" != ":" ]; then
            sed -i "${insertAfter:-1}a # $workVerb: $workItems" $1
        fi
        ;;
esac